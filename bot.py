# -*- coding: utf-8 -*-
"""bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18zy8N7RMmCPkhncCIgVgdv3FDv_nFsLJ
"""

!pip install aiogram -q

from aiogram import Bot, Dispatcher, types
import logging
import asyncio
import sys

API_TOKEN = " "

logging.basicConfig(level=logging.INFO)
dp = Dispatcher()

@dp.message()
async def echo(message: types.Message):
    """
    Асинхронная функция (корутина), которая отвечает пользователю.
    Она получает объект сообщения и отправляет ответ.

    :param message: объект сообщения от пользователя
    """
    await message.answer("Привет! Я твой бот.")

async def main():
    """
    Основная асинхронная функция для запуска бота.
    1. Создает объект бота с API токеном.
    2. Запускает диспетчер, который начинает обрабатывать сообщения.
    """
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
  await main()

from aiogram.filters import Command

dp = Dispatcher()

@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    """
    Функция отвечает пользователю, когда он отправляет команду /start или /help.
    """
    await message.answer("Привет! Я бот, который может отвечать на частые вопросы.")

import json

with open('faq.json', encoding='utf-8') as f:
  data = json.load(f)

data

@dp.message()
async def answer_faq(message: types.Message):
    """
    Функция получает текст сообщения, проверяет его в словаре и отправляет ответ.
    Если вопрос не найден в словаре, бот отправляет сообщение о неизвестном вопросе.
    """
    text = message.text.lower()
    response = faq.get(text, "Я не знаю ответа на этот вопрос.")
    await message.answer(response)

async def main():
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    await main()

dp = Dispatcher()

@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    await message.answer("Привет! Я бот, который может парсить документы.")

@dp.message(lambda message: message.document)
async def handle_docs(message: types.Message):
    document = message.document
    file_info = f"Файл: {document.file_name}\nРазмер: {document.file_size} байт" # Создаем строку с информацией о файле (имя и размер)
    await message.answer(file_info)

async def main():
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    await main()

import aiofiles

dp = Dispatcher()
bot = Bot(token=API_TOKEN)

@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    await message.answer("Привет! Я бот, который может парсить документы.")

@dp.message(lambda message: message.document)
async def handle_text_file(message: types.Message):
    """
    Функция загружает отправленный пользователем текстовый файл,
    читает его содержимое и считает количество слов.
    """
    await bot.download(
        message.document,
        destination="temp.txt"
    )

    async with aiofiles.open("temp.txt", mode='r', encoding='utf-8') as f:
        content = await f.read()

    word_count = len(content.split())

    await message.answer(f"Файл загружен. Количество слов: {word_count}")

async def main():
    await dp.start_polling(bot)
if __name__ == "__main__":
    await main()

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

dp = Dispatcher()

kb = [
    [
        KeyboardButton(text="О компании"),
        KeyboardButton(text="Связаться с оператором")
    ]
]

keyboard = ReplyKeyboardMarkup(
    keyboard=kb,
    resize_keyboard=True,
    input_field_placeholder="Выберите действие"
    )

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("С чем вам помочь?", reply_markup=keyboard)

@dp.message(lambda message: message.text == "О компании")
async def about_bot(message: types.Message):
    """
    Функция отвечает пользователю, если он нажал кнопку "О компании".
    """
    await message.answer("Наша компания занимается доставкой товаров по всей стране.")

@dp.message(lambda message: message.text == "Связаться с оператором")

async def about_bot(message: types.Message):
    """
    Функция отправляет пользователю справочную информацию.
    """
    await message.answer("Перевожу на оператора...")

async def main():
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    await main()