# -*- coding: utf-8 -*-
"""bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y3AEjGt8nIaVjjpl4Bq-gtPqU6S4Lf28
"""

!pip install aiogram -q

from aiogram.filters import Command

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import json

with open('faq.json', encoding='utf-8') as f:
  data = json.load(f)

data

for name, dicts in data.items():
  for i in dicts:
    print(i)

keywords = {
   "цены": ["цены", "стоимость", "заказ", "оплата"],
   "часы работы": ["часы работы", "время работы", "доступность"],
   "доставка": ["доставка", "сроки доставки", "стоимость доставки", "отслеживание"],
   "возврат": ["возврат", "обмен", "возврат товара", "гарантия"],
   "контакты": ["связаться", "телефон", "email", "адрес"]
}

for name, dicts in keywords.items():
  for i in dicts:
    print(i)

from aiogram import Bot, Dispatcher, types  # Основные классы для работы с ботом
import logging  # Логирование для отслеживания работы бота
import asyncio  # Модуль для работы с асинхронным кодом
import sys  # Используется для работы с системными вызовами

# Токен API бота (его нужно заменить на реальный токен, полученный у BotFather)
API_TOKEN = "7860064718:AAFbwWrfPDdkQ5eY7J1N5rwhlXlmlafpCso"

# Настраиваем логирование, чтобы видеть информацию о работе бота в консоли
logging.basicConfig(level=logging.INFO)
# Создаем объект диспетчера, который управляет входящими сообщениями и командами
dp = Dispatcher()

# Обрабатываем команды "/start" и "/help"
@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    await message.answer("Привет! Я бот, который может отвечать на частые вопросы.", reply_markup=keyboard)

# Создаём список кнопок для клавиатуры
kb = [
    [
        KeyboardButton(text="О компании"), # Кнопка для запроса информации о боте
        KeyboardButton(text="Связаться с оператором")  # Кнопка для получения справки
    ]
]

# Создаём объект клавиатуры с кнопками
keyboard = ReplyKeyboardMarkup(
    keyboard=kb, # Передаём список кнопок
    resize_keyboard=True, # Уменьшаем клавиатуру под размер экрана
    input_field_placeholder="Выберите действие" # Текст-подсказка в поле ввода
    )

# Обрабатываем нажатие кнопки "О компании"
@dp.message(lambda message: message.text == "О компании")
async def about_company(message: types.Message):
    await message.answer("Наша компания занимается доставкой товаров по всей стране.")

# Обрабатываем нажатие кнопки "Связаться с оператором"
@dp.message(lambda message: message.text == "Связаться с оператором")
async def about_company(message: types.Message):
    await message.answer("Перевожу на оператора...")

# Обрабатываем все входящие сообщения
@dp.message()
async def answer_faq(message: types.Message):
    """
    Функция получает текст сообщения, проверяет его в словаре и отправляет ответ.
    Если вопрос не найден в словаре, бот отправляет сообщение о неизвестном вопросе.
    """
    text = message.text

    for name, dicts in data.items():
      for i in dicts:
        if i['question'] == text:
          response = i['answer']
        else:
          for word in text.split():
            if word.lower() in i['answer']:
              response = i['answer']
            elif word.lower() in i['question']:
              response = i['answer']
            else:
              for name, dicts in keywords.items():
                for i in dicts:
                  if keywords.value[i] == text:
                    response = i ['answer']
                else:
                  response = 'Я не нашёл ответ на этот вопрос.'

    await message.answer(response)

async def main():
    """
    Основная асинхронная функция для запуска бота.
    1. Создает объект бота с API токеном.
    2. Запускает диспетчер, который начинает обрабатывать сообщения.
    """
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    await main()